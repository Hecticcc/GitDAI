rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidNewUser() {
      let data = request.resource.data;
      return data.keys().hasAll(['email', 'username', 'createdAt', 'tokens']) &&
             data.tokens == 500 && // Initial tokens
             data.email is string &&
             data.username is string;
    }

    // Users collection
    match /users/{userId} {
      allow read: if isOwner(userId);
      allow create: if isOwner(userId) && isValidNewUser();
      allow update: if isOwner(userId) && 
                   (
                     // Allow updating lastLogin and other fields
                     request.resource.data.diff(resource.data).affectedKeys()
                       .hasAny(['lastLogin', 'updatedAt']) ||
                     // For token updates, ensure they can only decrease
                     request.resource.data.tokens < resource.data.tokens
                   );
    }
    
    // Pterodactyl user mappings
    match /pterodactyl_users/{pterodactylId} {
      allow read: if isAuthenticated() &&
                 (resource.data.userId == request.auth.uid);
      allow create: if isAuthenticated() &&
                   request.resource.data.userId == request.auth.uid;
    }
  }
}